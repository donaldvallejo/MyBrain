Analyze the Problem- Figure out exactly what the problem to be solved is. Try to understand as much as possible about it. Until you really know what the problem is, you cannot begin to solve it.

Determine Specifications- Describe exactly what your program will do. At this point, you should not worry about how your program will work, but rather about deciding exactly what it will accomplish. For simple programs this involves carefully describing what the inputs and outputs of the program will be and how they relate to each other.

Create a Design- Formulate the overall structure of the program. This is where the how of the program gets worked out. The main task is to design the algorithm(s) that will meet the specifications.

Implement the design- Translate the design into a computer language and put it into the computer. In this book, we will be implementing our algorithms as Python programs.

test/debug the program- 
Test/Debug the Program Try out your program and see whether it works as expected. If there are any errors (often called bugs), then you should go back and fix them. The process of locating and fixing errors is called debugging a program. During the debugging phase, your goal is to find errors, so you should try everything you can think of that might ''break" the program. It's good to keep in mind the old maxim: "Nothing is foolproof because fools are too ingenious."

Maintain the program- Continue developing the program in response to the needs of your users. Most programs are never really finished; they keep evolving over years of use


General notes-


In Python, values may end up anywhere in memory, and variables are used to refer to them.

variables- A variable is an identifier that stores a value.

literal- is used to indicate a specific value. is a representation of a specific value. For example, 3 is a literal representing the number three.

Statement- a complete command is called a statement.

identifiers- Every identifier must begin with a letter or underscore. which may be followed by any sequence of letters, digits, or underscores. this implies that a single identifier can contain any spaces. 

expression- The fragments of program code that produce or calculate new data values.

evaluation- the process of turning an exspression into an underlying data type. 

meta-languages- sophisticated notations called meta-language for describing programming languages. 

keyword parameters- We can modifiy that behavior by inclluding an additional parameter that explicitly overrides this default. this is done using a special syntax for named or keyword parameters.

assignment statement- has this form:
<variable> = <expr>
Here variable is an identifier and expr is an expression.

garbage collection- the process of automatic memory management. 

input statement- accomplished using an assignment statement combined with a built-in function called input
<variable> = input ( <prompt>)

eval- when user input is a number, we need a slightly more complicated form of input statement.
<variable> = eval(input(<prompt>))